{"source_files":[{"name":"src/scripts/feedback.js","source":"/**\r\n * @license\r\n * http://matowens.github.io/ng-notify\r\n * (c) 2014 MIT License, matowens.com\r\n */\r\n(function() {\r\n\r\n    'use strict';\r\n\r\n     var module = angular.module('angular-feedback', []);\r\n\r\n     module.provider('feedback', function() {\r\n\r\n        this.$get = ['$document', '$compile', '$rootScope', '$timeout',\r\n\r\n            function($document, $compile, $rootScope, $timeout) {\r\n\r\n                var defaults = {\r\n                    duration: 3000,\r\n                    type: 'info',\r\n                    sticky: false\r\n                };\r\n\r\n                var userOpts = {};\r\n\r\n                var types = {\r\n                    'info': 'fdb-info',\r\n                    'error': 'fdb-error',\r\n                    'success': 'fdb-success',\r\n                    'warn': 'fdb-warn',\r\n                    'grimace': 'fdb-grimace',\r\n                    'neutral': 'fdb-neutral'\r\n                };\r\n\r\n                var timeoutAutoDismiss;\r\n                var timeoutDismiss;\r\n\r\n                var feedbackScope = $rootScope.$new();\r\n\r\n                feedbackScope.isActive = false;\r\n\r\n                var tpl = $compile(\r\n                    '<div class=\"fdb\" ng-show=\"isActive\">' +\r\n                        '<div class=\"fdb-inner\" ng-class=\"feedbackClass\" ng-click=\"!isLoading && dismiss()\">' +\r\n                            '<span class=\"fdb-message\" ng-if=\"!isLoading\">{{ message }}</span>' +\r\n                            '<span class=\"fdb-spinner\" ng-if=\"isLoading\"></span>' +\r\n                        '</div>' +\r\n                    '</div>'\r\n                )(feedbackScope);\r\n\r\n                $document.find('body').append(tpl);\r\n\r\n                var reset = function() {\r\n                    feedbackScope.isActive = false;\r\n                    feedbackScope.feedbackClass = '';\r\n                    feedbackScope.message = '';\r\n                    feedbackScope.isLoading = false;\r\n                    delete feedbackScope.type;\r\n                    delete feedbackScope.sticky;\r\n                };\r\n\r\n                feedbackScope.dismiss = function() {\r\n                    if ( feedbackScope.isLoading ) {\r\n                        feedbackScope.feedbackClass += ' fdb-unloading';\r\n                    } else {\r\n                        feedbackScope.feedbackClass += ' fdb-contract';\r\n                    }\r\n\r\n                    timeoutDismiss = $timeout(function() {\r\n                        reset();\r\n                    }, 500);\r\n                };\r\n\r\n\r\n                var el = tpl;\r\n\r\n                /**\r\n                 * Our primary object containing all public API methods and allows for all our functionality to be invoked.\r\n                 */\r\n                var feedbackObject = {\r\n\r\n                    config: function(params) {\r\n                        params = params || {};\r\n                        angular.extend(defaults, params);\r\n                    },\r\n\r\n                    notify: function(message, userOpt) {\r\n                        var options = {};\r\n\r\n                        if (!message) {\r\n                            return;\r\n                        }\r\n\r\n                        $timeout.cancel(timeoutAutoDismiss);\r\n                        $timeout.cancel(timeoutDismiss);\r\n\r\n                        if (typeof userOpt === 'object') {\r\n                            options = angular.extend( {}, defaults, userOpt );\r\n                        } else {\r\n                            options = angular.extend( {}, defaults );\r\n                            if ( userOpt && types[userOpt] ) {\r\n                                options.type = userOpt;\r\n                            }\r\n                        }\r\n\r\n                        var c = types[options.type] + ' ';\r\n                        c += options.sticky ? ' fdb-sticky' : '';\r\n                        c += ' fdb-expand';\r\n\r\n                        feedbackScope.isActive = true;\r\n                        feedbackScope.feedbackClass = c;\r\n                        feedbackScope.isLoading = false;\r\n                        feedbackScope.message = message;\r\n                        feedbackScope.type = options.type;\r\n                        feedbackScope.sticky = options.sticky;\r\n\r\n                        if ( !options.sticky ) {\r\n                            timeoutAutoDismiss = $timeout(function() {\r\n                                feedbackScope.dismiss();\r\n                            }, options.duration);\r\n                        }\r\n                    },\r\n\r\n                    load: function() {\r\n                        $timeout.cancel(timeoutAutoDismiss);\r\n                        $timeout.cancel(timeoutDismiss);\r\n\r\n                        var c = types.neutral + ' ' + ' fdb-loading';\r\n\r\n                        feedbackScope.isActive = true;\r\n                        feedbackScope.feedbackClass = c;\r\n                        feedbackScope.message = '';\r\n                        feedbackScope.isLoading = true;\r\n                        delete feedbackScope.type;\r\n                        delete feedbackScope.sticky;\r\n                    },\r\n\r\n                    dismiss: function() {\r\n                        feedbackScope.dismiss();\r\n                    },\r\n\r\n                    isActive: function() {\r\n                        return !!feedbackScope.isActive;\r\n                    },\r\n\r\n                    isLoading: function() {\r\n                        return !!feedbackScope.isLoading;\r\n                    },\r\n\r\n                    isSticky: function() {\r\n                        return !!feedbackScope.sticky;\r\n                    },\r\n\r\n                    getType: function() {\r\n                        return feedbackScope.type;\r\n                    },\r\n\r\n                    getMessage: function() {\r\n                        return feedbackScope.message;\r\n                    },\r\n\r\n                    addType: function(typeName, typeClass) {\r\n                        if (!typeName || !typeClass) {\r\n                            return;\r\n                        }\r\n                        types[typeName] = typeClass;\r\n                    }\r\n\r\n                };\r\n\r\n                return feedbackObject;\r\n            }\r\n        ];\r\n     });\r\n})();\r\n","coverage":[null,null,null,null,null,1,null,null,null,1,null,1,null,14,null,null,null,14,null,null,null,null,null,14,null,14,null,null,null,null,null,null,null,null,14,14,null,14,null,14,null,14,null,null,null,null,null,null,null,null,14,null,14,2,2,2,2,2,2,null,null,14,3,1,null,2,null,null,3,2,null,null,null,null,14,null,null,null,null,14,null,null,2,2,null,null,null,12,null,12,1,null,null,11,11,null,11,1,null,10,10,2,null,null,null,11,11,11,null,11,11,11,11,11,11,null,11,9,1,null,null,null,null,null,2,2,null,2,null,2,2,2,2,2,2,null,null,null,2,null,null,null,6,null,null,null,5,null,null,null,4,null,null,null,10,null,null,null,1,null,null,null,3,2,null,1,null,null,null,null,14,null,null,null,null,null]}],"git":{"head":{"id":"3caa7a74c4691fe2457622ccc49fa50321a21115","author_name":"Andrei Pfeiffer","author_email":"andrei@upsidedown.ro","committer_name":"Andrei Pfeiffer","committer_email":"andrei@upsidedown.ro","message":"Set multiple coverage reporters in karma"},"branch":"master","remotes":[{"name":"origin","url":"https://github.com/andreipfeiffer/angular-feedback.git"},{"name":"upstream","url":"https://github.com/matowens/ng-notify.git"}]},"run_at":"2014-11-30T09:39:55.701Z"}